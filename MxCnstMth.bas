Attribute VB_Name = "MxCnstMth"
Option Compare Text
Option Explicit
Const CLib$ = "QIde."
Const CMod$ = CLib & "MxCnstMth."
Private CnstmnInEdt$, MdnInEdt$

Function IsCm(MthSrc$()) As Boolean
'Ret : True if @MthSrc is a :Cm: ! A :Cm: is a fun of $() wi lin-2       is [Dim A As New Bfr]
'                               !                        and las-snd-lin is [<Mthn> = A.Ly]
If Si(MthSrc) <= 1 Then Exit Function
Dim N$: N = Mthn(MthSrc(0))
If N = "" Then Exit Function
If MthSrc(1) <> "Dim A As New Bfr" Then Exit Function
If LasSndEle(MthSrc) <> N & " = A.Ly" Then Exit Function
IsCm = True
End Function

Function CmCd(Cnstmn$, Ly$(), Optional IsPub As Boolean) As String()
'Fm Cnstmn : :Cnstmn
'Ret : :Cd #Cnst-Mth-Cd ! ret a Cd from @Ly.  :Cd: is :Ly generated by pgm. @@
':Cd: :Src #Code-Ly# ! Src Cd that is generated by pgm.
Dim Mdy$: If Not IsPub Then Mdy = "Private "
PushI CmCd, FmtQQ("?Function ?() As String()", Mdy, Cnstmn)
PushI CmCd, "Dim A As New Bfr"
Dim L: For Each L In Ly
    PushI CmCd, "A.Var " & QteVb(L)
Next
PushI CmCd, Cnstmn & " = A.Bfr"
PushI CmCd, "End Function"
End Function

Function CmVal(CmSrc$()) As String()
'Fm CmSrc : :CmSrc: #Cnst-Mth-Src# ! it is cnst-mth-Ly (:Cm)
'Ret      : #Cnst-Mth-Val# ! it is :Ly.  It comes each lin of @CmSrc of [...] of Lin = [A.Var "..."]
Dim L: For Each L In Itr(CmSrc)
PushNB CmVal, CmLinVal(L)
Next
End Function
Function CmLinVal$(CmSrcl)
'Fm CmSrcl : # Cnst-Mth-Src-Lin  ! the src lin with a :CmSrc
'Ret       : # Cnst-Mth-Lin-Val  ! ret [...] in A.Var "..."
Dim L$: L = CmSrcl
If ShfPfx(L, "A.Var ") Then CmLinVal = UnQteVb(L)
End Function

Sub EdtCnstm(Cnstmn$)
'Fm Cnstmn : ! Cnstmn is a mthn of a :Cm
CnstmnInEdt = Cnstmn
MdnInEdt = CMdn
ExpCmVal MdnInEdt, Cnstmn
BrwFt EnsFt(FtzCmInEdt)
End Sub

Sub ExpCmVal(Mdn$, Cnstmn$)
Dim M As CodeModule: Set M = Md(Mdn)
Dim Ly$(): Ly = MthlyzM(M, Cnstmn)
If Si(Ly) = 0 Then Debug.Print "No Cnst-Mthn[" & Cnstmn & "]"
If IsCm(Ly) Then Debug.Print "Cnst-Mthn[" & Cnstmn & "] is not a Cnst-Mth": Exit Sub
Dim Ft$: Ft = FtzCm(Mdn, Cnstmn)
WrtAy CmVal(Ly), Ft
End Sub

Function FtzCm$(Mdn$, Cnstmn$)
If Mdn = "" Then Debug.Print "Mdn is blnk": Exit Function
If Cnstmn = "" Then Debug.Print "Cnstmn is blnk": Exit Function
Dim H$: H = TmpFdr("Cnst")
Dim A$: A = AddFdrEns(H, Mdn)
FtzCm = A & Cnstmn & ".txt"
End Function

Function FtzCmInEdt$()
FtzCmInEdt = FtzCm(MdnInEdt, CnstmnInEdt)
End Function

Sub ImpCnstm(Optional IsPub As Boolean)
ImpCnstmByNm MdnInEdt, CnstmnInEdt
End Sub

Sub ImpCnstmByNm(Mdn$, Cnstmn$, Optional IsPub As Boolean)
Dim Ft$: Ft = FtzCm(Mdn, Cnstmn)
If NoFfn(Ft) Then
    Debug.Print "FtzCm not found"
    Debug.Print "Mdn     : "; Mdn
    Debug.Print "Cnstn   : "; Cnstmn
    Debug.Print "FtzCm  : "; Ft
    Exit Sub
End If
Dim M As CodeModule: Set M = Md(Mdn)
Dim NewL$: NewL = JnCrLf(CmCd(Cnstmn, LyzFt(Ft), IsPub))
RplMth M, Cnstmn, NewL
End Sub

Function AA() As String()
Dim A As New Bfr
A.Var "sdfsdfsdfsdf"
A.Var "s;dlfk lsk;df sdf"
A.Var ""
AA = A.Ly
End Function
